//JAVA PROGRAM FOR DOUBLY LINKED LIST
//REVERSE OF LINKEDLIST IS EASY


package Doublylinkedlist;
import java.util.Scanner;

public class doublylinkedlist {
static class Node{
	int x;
	Node rl= null;
	Node ll=null;
	Node(int x){
	this.x= x;	
	}
}
static Node first=null;		
static Scanner sc = new Scanner(System.in);
public static void main(String [] args) {
for(;;) {
	
	System.out.println("Enter your choice");
	System.out.println("1 insert_front\n2 delete_front\n3 insert_rear"
			+ "\n4 delete_rear\n5 display");
	int choice = sc.nextInt();
	
	switch(choice) {
	case 1:
	first=insert_front(first);
	break;
	case 2:
	first=delete_front(first);
	break;
	case 3:
   first=insert_rear(first);	
	break;
    case 4:
   first= delete_rear(first);
	break;
	case 5:
		display(first);break;
	default:
		System.out.println("Invalid choice");
		break;
	}
	
}			
}

static Node delete_front(Node first) {
if(first==null) {
System.out.println("No item in list");return null;
}
first=first.rl;
return first;
} 

static Node delete_rear(Node first) {
if(first==null) {
System.out.println("No item in list");
return null;
} 
if(first.rl==null) {
return null;   
}  	 
Node prev=null;

for(Node temp=first;temp!=null;prev=temp,temp=temp.rl);

System.out.println(prev.x);
return first;
} 

static void display(Node first) {
if(first==null){
System.out.println("No item in list");
return;
}
System.out.println("For reverse put 1 "
		+ "otherwise put rather than 1 ");
int n=sc.nextInt();
Node temp=first;
if(n==1) {
while(temp.rl!=null)
{
temp=temp.rl;	
}
while(temp!=null){
System.out.print(temp.x+"\t");
temp = temp.ll;
 }
}
else {
while(temp!=null){
System.out.print(temp.x+"\t");
temp = temp.rl;
 }	
}

System.out.println("");
}   


static Node insert_front(Node first){
System.out.println("Enter item to insert");
int n= sc.nextInt();	
Node temp = new Node(n);
if(first==null){
return temp;
}
temp.rl=first; 
first.ll=temp;
return temp;
}

static Node insert_rear(Node first) {
System.out.println("Enter item to insert");
int n= sc.nextInt();	
Node temp = new Node(n);	    
if(first==null) {	
return temp;
}    
Node node=first;
while(node.rl!=null) {
	node=node.rl;
}

node.rl=temp;
temp.ll=node;
return  first;
 } 		
}








---------------------------------------------------

//OUTPUT
Enter your choice
1 insert_front
2 delete_front
3 insert_rear
4 delete_rear
5 display
1
Enter item to insert
2
Enter your choice
1 insert_front
2 delete_front
3 insert_rear
4 delete_rear
5 display
1
Enter item to insert
4
Enter your choice
1 insert_front
2 delete_front
3 insert_rear
4 delete_rear
5 display
1
Enter item to insert
5
Enter your choice
1 insert_front
2 delete_front
3 insert_rear
4 delete_rear
5 display
5
For reverse put 1 otherwise put rather than 1 
2
5	4	2	
Enter your choice
1 insert_front
2 delete_front
3 insert_rear
4 delete_rear
5 display
1
Enter item to insert
45
Enter your choice
1 insert_front
2 delete_front
3 insert_rear
4 delete_rear
5 display
5
For reverse put 1 otherwise put rather than 1 
3
45	5	4	2	
Enter your choice
1 insert_front
2 delete_front
3 insert_rear
4 delete_rear
5 display
3
Enter item to insert
445
Enter your choice
1 insert_front
2 delete_front
3 insert_rear
4 delete_rear
5 display
3
Enter item to insert
66
Enter your choice
1 insert_front
2 delete_front
3 insert_rear
4 delete_rear
5 display
5
For reverse put 1 otherwise put rather than 1 
4
45	5	4	2	445	66	
Enter your choice
1 insert_front
2 delete_front
3 insert_rear
4 delete_rear
5 display
5
For reverse put 1 otherwise put rather than 1 
1
66	445	2	4	5	45	
Enter your choice
1 insert_front
2 delete_front
3 insert_rear
4 delete_rear
5 display


